import path from 'node:path'
import fs from 'node:fs/promises'
import { fileURLToPath } from 'node:url'
import type { Scheme } from '@material/material-color-utilities'
import { argbFromHex, hexFromArgb, themeFromSourceColor } from '@material/material-color-utilities'

const __dirname = path.dirname(fileURLToPath(import.meta.url))

export async function generateTheme(input: string = '#673ab7', customColors?: string[]) {
  if (!validateHex(input) || (customColors && !customColors.every(validateHex)))
    throw new Error('Invalid hex color')

  const theme = themeFromSourceColor(
    argbFromHex(input),
    customColors?.map((color, index) => ({
      name: `custom-${index}`,
      value: argbFromHex(color),
      blend: true,
    })),
  )

  const lightVars = getSchemeVars(theme.schemes.light)
  const darkVars = getSchemeVars(theme.schemes.dark)

  const targetFile = path.resolve(__dirname, '../color/_var.scss')
  const content = `/** Don't edit this file directly. It is generated by \`material3-style color\`. */

@mixin theme-light {
  ${lightVars}
}

@mixin theme-dark {
  ${darkVars}
}
  `
  await fs.writeFile(targetFile, content, 'utf-8')

  const cssLightFile = path.resolve(__dirname, '../color/css/theme-light.css')
  const cssDarkFile = path.resolve(__dirname, '../color/css/theme-dark.css')
  await Promise.all([
    fs.writeFile(cssLightFile, `:root {${lightVars.replaceAll(/[ \n]/g, '')}}`, 'utf-8'),
    fs.writeFile(cssDarkFile, `:root {${lightVars.replaceAll(/[ \n]/g, '')}}`, 'utf-8'),
  ])
}

function getSchemeVars(
  scheme: Scheme,
  suffix: string = '',
) {
  const vars: string[] = []
  for (const [key, value] of Object.entries(scheme.toJSON())) {
    const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
    const color = hexFromArgb(value)
    vars.push(`--md-sys-color-${token}${suffix}: ${color};`)
  }
  for (const [key] of Object.entries(scheme.toJSON())) {
    const token = key.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase()
    vars.push(`--m3-color-${token}${suffix}: var(--md-sys-color-${token}${suffix});`)
  }
  return vars.join('\n  ')
}

function validateHex(hex: string) {
  return /^#([0-9A-F]{3}){1,2}$/i.test(hex)
}
